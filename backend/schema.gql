# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""AccessToken for User"""
type AccessTokenData {
  accessToken: String!
  accessTokenExpireDate: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""The Scribe Document"""
type Document {
  defaults: JSONObject!
  format: JSONObject!
  id: ID!
  name: String!
  pageCount: Float!
  pages: [JSONObject!]!
  private: Boolean!
  setting: DocumentSetting!
  size: Float!
  thumb: String!
  user: PublicUser!
  version: Float!
}

input DocumentInput {
  defaults: JSONObject!
  format: JSONObject!
  id: String
  name: String!
  pages: [JSONObject!]!
  private: Boolean
  thumb: String!
  version: Float!
}

"""The setting of this document."""
enum DocumentSetting {
  DUNGEONS_AND_DRAGONS
}

"""The Saved Documents"""
type Documents {
  documentCount: Float!
  documents: [Document!]!
}

input FindAllDocumentsFilter {
  searchTerm: String
  userId: String
}

input FindAllDocumentsInput {
  filter: FindAllDocumentsFilter
  paging: Paging
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  changeUserEmail(email: String!): Boolean!
  changeUserName(username: String!): Boolean!
  changeUserPassword(password: String!): Boolean!
  createUser(input: UserCreateInput!): Boolean!
  doc_delete(id: String!): Boolean!
  doc_save(input: DocumentInput!): Document!
  logout(userId: String!): Boolean!
  passwordForgotten(loginName: String!): Boolean!
  resetPassword(password: String!, token: String!): Boolean!
}

input Paging {
  limit: Float!
  page: Float!
}

"""The UserPatreonInformation model"""
type PatreonInformation {
  checkedOn: DateTime!
  discord: [String!]
  email: String!
  id: ID!
  name: String!
  note: String
  status: String
  tier: String
  tierId: String
}

"""The public User model"""
type PublicUser {
  id: ID!
  username: String!
}

type Query {
  confirmEmail(token: String!): String!
  doc_find(id: String!): Document!
  doc_findAll(input: FindAllDocumentsInput): Documents!
  doc_list: SavedDocuments!
  getToken(refreshToken: String!, userId: String!): AccessTokenData!
  login(input: UserLoginInput!): User!
  patreonInformation: PatreonInformation
  softLogin(refreshToken: String!, userId: String!): User!
}

"""The Saved Documents and Rights"""
type SavedDocuments {
  allowPrivate: Boolean!
  documentCount: Float!
  documents: [Document!]!
  maxDocuments: Float!
  maxSize: Float!
  totalSize: Float!
}

"""The User model"""
type User {
  accessToken: String!
  accessTokenExpireDate: DateTime!
  email: String!
  id: ID!
  patreon: PatreonInformation
  refreshToken: String
  refreshTokenExpireDate: DateTime
  username: String!
}

input UserCreateInput {
  email: String!
  password: String!
  username: String!
}

input UserLoginInput {
  loginName: String!
  password: String!
}
